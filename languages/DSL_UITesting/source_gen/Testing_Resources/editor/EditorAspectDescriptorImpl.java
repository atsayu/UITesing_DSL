package Testing_Resources.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AndOfAciton_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Click_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new InputText_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Maximize_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new OrOfAction_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new PageContainValidation_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new TestCase_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new TestSuite_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new URLValidation_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new WaitPageContainsElement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new WebPage_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x65da7a46226281c6L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x5e850f852d9f61bdL), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x5e850f852d9f61b7L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x55f23646c34291c3L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x3de46a5c4f37cdc6L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x16f253d68a0198c5L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x5e850f852d9f61c2L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x16f253d68a0198b1L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x4c1f89def2610acaL), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x713bab4a4f9d11d8L), MetaIdFactory.conceptId(0xd46317ec6b314005L, 0x8773ee03f2c019d7L, 0x5e850f852d9f61cdL)).seal();
}
