package DSL_UITesting.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_AndOfAciton;
  private ConceptPresentation props_Click;
  private ConceptPresentation props_InputText;
  private ConceptPresentation props_LogicOfActions;
  private ConceptPresentation props_Maximize;
  private ConceptPresentation props_OrOfAction;
  private ConceptPresentation props_PageContainValidation;
  private ConceptPresentation props_TestCase;
  private ConceptPresentation props_TestSuite;
  private ConceptPresentation props_URLValidation;
  private ConceptPresentation props_Validation;
  private ConceptPresentation props_WaitPageContainsElement;
  private ConceptPresentation props_WebPage;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.AndOfAciton:
        if (props_AndOfAciton == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AndOfAciton");
          props_AndOfAciton = cpb.create();
        }
        return props_AndOfAciton;
      case LanguageConceptSwitch.Click:
        if (props_Click == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("click");
          props_Click = cpb.create();
        }
        return props_Click;
      case LanguageConceptSwitch.InputText:
        if (props_InputText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("input");
          props_InputText = cpb.create();
        }
        return props_InputText;
      case LanguageConceptSwitch.LogicOfActions:
        if (props_LogicOfActions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LogicOfActions = cpb.create();
        }
        return props_LogicOfActions;
      case LanguageConceptSwitch.Maximize:
        if (props_Maximize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Maximize");
          props_Maximize = cpb.create();
        }
        return props_Maximize;
      case LanguageConceptSwitch.OrOfAction:
        if (props_OrOfAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OrOfAction");
          props_OrOfAction = cpb.create();
        }
        return props_OrOfAction;
      case LanguageConceptSwitch.PageContainValidation:
        if (props_PageContainValidation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PageContainValidation");
          props_PageContainValidation = cpb.create();
        }
        return props_PageContainValidation;
      case LanguageConceptSwitch.TestCase:
        if (props_TestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestCase = cpb.create();
        }
        return props_TestCase;
      case LanguageConceptSwitch.TestSuite:
        if (props_TestSuite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSuite = cpb.create();
        }
        return props_TestSuite;
      case LanguageConceptSwitch.URLValidation:
        if (props_URLValidation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("URLValidation");
          props_URLValidation = cpb.create();
        }
        return props_URLValidation;
      case LanguageConceptSwitch.Validation:
        if (props_Validation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Validation = cpb.create();
        }
        return props_Validation;
      case LanguageConceptSwitch.WaitPageContainsElement:
        if (props_WaitPageContainsElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WaitPageContainsElement");
          props_WaitPageContainsElement = cpb.create();
        }
        return props_WaitPageContainsElement;
      case LanguageConceptSwitch.WebPage:
        if (props_WebPage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("webpage");
          props_WebPage = cpb.create();
        }
        return props_WebPage;
    }
    return null;
  }
}
